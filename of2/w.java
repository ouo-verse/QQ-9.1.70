package of2;

import com.tencent.gamecenter.wadl.biz.entity.WadlProxyConsts;
import com.tencent.mobileqq.mini.servlet.MiniAppGetGameTaskTicketServlet;
import com.tencent.qqmini.sdk.launcher.core.proxy.va.VirtualAppProxy;
import com.tencent.qqnt.kernel.nativeinterface.AIClusteringStatus;
import com.tencent.qqnt.kernel.nativeinterface.DownloadInfo;
import com.tencent.qqnt.kernel.nativeinterface.FileSet;
import com.tencent.qqnt.kernel.nativeinterface.Permission;
import com.tencent.qqnt.kernel.nativeinterface.Picture;
import com.tencent.qqnt.kernel.nativeinterface.ShareInfo;
import com.tencent.qqnt.kernel.nativeinterface.UploadInfo;
import com.tencent.qqnt.kernel.nativeinterface.Uploader;
import cooperation.qqcircle.report.datong.QCircleDaTongConstant;
import java.util.ArrayList;
import kotlin.Metadata;
import kotlin.collections.CollectionsKt__MutableCollectionsKt;
import kotlin.jvm.internal.Intrinsics;

/* compiled from: P */
@Metadata(d1 = {"\u0000\u0010\n\u0002\u0018\u0002\n\u0002\u0010\u0011\n\u0002\u0010\u0000\n\u0002\b\u0003\u001a\u0017\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00020\u0001*\u00020\u0000\u00a2\u0006\u0004\b\u0003\u0010\u0004\u00a8\u0006\u0005"}, d2 = {"Lcom/tencent/qqnt/kernel/nativeinterface/FileSet;", "", "", "a", "(Lcom/tencent/qqnt/kernel/nativeinterface/FileSet;)[Ljava/lang/Object;", "qqecommerce_impl_release"}, k = 2, mv = {1, 7, 1})
/* loaded from: classes38.dex */
public final class w {
    public static final Object[] a(FileSet fileSet) {
        Intrinsics.checkNotNullParameter(fileSet, "<this>");
        ArrayList arrayList = new ArrayList();
        arrayList.add("fileSetId");
        String fileSetId = fileSet.fileSetId;
        Intrinsics.checkNotNullExpressionValue(fileSetId, "fileSetId");
        arrayList.add(fileSetId);
        arrayList.add("name");
        String name = fileSet.name;
        Intrinsics.checkNotNullExpressionValue(name, "name");
        arrayList.add(name);
        arrayList.add("namePinyin");
        String namePinyin = fileSet.namePinyin;
        Intrinsics.checkNotNullExpressionValue(namePinyin, "namePinyin");
        arrayList.add(namePinyin);
        arrayList.add("totalFileCount");
        arrayList.add(String.valueOf(fileSet.totalFileCount));
        arrayList.add("totalFileSize");
        arrayList.add(String.valueOf(fileSet.totalFileSize));
        arrayList.add(QCircleDaTongConstant.ElementParamValue.PERMISSION);
        Permission permission = fileSet.permission;
        Intrinsics.checkNotNullExpressionValue(permission, "permission");
        Object[] a16 = bo.a(permission);
        arrayList.add(Integer.valueOf(a16.length));
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, a16);
        arrayList.add("shareInfo");
        ShareInfo shareInfo = fileSet.shareInfo;
        Intrinsics.checkNotNullExpressionValue(shareInfo, "shareInfo");
        Object[] a17 = bu.a(shareInfo);
        arrayList.add(Integer.valueOf(a17.length));
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, a17);
        arrayList.add("cover");
        Picture cover = fileSet.cover;
        Intrinsics.checkNotNullExpressionValue(cover, "cover");
        Object[] a18 = bq.a(cover);
        arrayList.add(Integer.valueOf(a18.length));
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, a18);
        arrayList.add("uploaders");
        arrayList.add(Integer.valueOf(fileSet.uploaders.size()));
        ArrayList<Uploader> uploaders = fileSet.uploaders;
        Intrinsics.checkNotNullExpressionValue(uploaders, "uploaders");
        for (Uploader elem : uploaders) {
            Intrinsics.checkNotNullExpressionValue(elem, "elem");
            Object[] a19 = cb.a(elem);
            arrayList.add(Integer.valueOf(a19.length));
            CollectionsKt__MutableCollectionsKt.addAll(arrayList, a19);
        }
        arrayList.add("expireLeftTime");
        arrayList.add(String.valueOf(fileSet.expireLeftTime));
        arrayList.add("aiClusteringStatus");
        AIClusteringStatus aiClusteringStatus = fileSet.aiClusteringStatus;
        Intrinsics.checkNotNullExpressionValue(aiClusteringStatus, "aiClusteringStatus");
        Object[] a26 = a.a(aiClusteringStatus);
        arrayList.add(Integer.valueOf(a26.length));
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, a26);
        arrayList.add(WadlProxyConsts.CREATE_TIME);
        arrayList.add(String.valueOf(fileSet.createTime));
        arrayList.add("expireTime");
        arrayList.add(String.valueOf(fileSet.expireTime));
        arrayList.add("firstLevelItemCount");
        arrayList.add(String.valueOf(fileSet.firstLevelItemCount));
        arrayList.add("svrLastUpdateTimestamp");
        arrayList.add(String.valueOf(fileSet.svrLastUpdateTimestamp));
        arrayList.add(MiniAppGetGameTaskTicketServlet.KEY_TASKID);
        String taskId = fileSet.taskId;
        Intrinsics.checkNotNullExpressionValue(taskId, "taskId");
        arrayList.add(taskId);
        arrayList.add("uploadInfo");
        UploadInfo uploadInfo = fileSet.uploadInfo;
        Intrinsics.checkNotNullExpressionValue(uploadInfo, "uploadInfo");
        Object[] a27 = ca.a(uploadInfo);
        arrayList.add(Integer.valueOf(a27.length));
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, a27);
        arrayList.add("downloadInfo");
        DownloadInfo downloadInfo = fileSet.downloadInfo;
        Intrinsics.checkNotNullExpressionValue(downloadInfo, "downloadInfo");
        Object[] a28 = p.a(downloadInfo);
        arrayList.add(Integer.valueOf(a28.length));
        CollectionsKt__MutableCollectionsKt.addAll(arrayList, a28);
        arrayList.add("transferType");
        arrayList.add(Integer.valueOf(fileSet.transferType.ordinal()));
        arrayList.add("isLocalCreate");
        arrayList.add(Integer.valueOf(fileSet.isLocalCreate ? 1 : 0));
        arrayList.add("status");
        arrayList.add(Integer.valueOf(fileSet.status.ordinal()));
        arrayList.add("uploadStatus");
        arrayList.add(Integer.valueOf(fileSet.uploadStatus.ordinal()));
        arrayList.add("uploadPauseReason");
        arrayList.add(Integer.valueOf(fileSet.uploadPauseReason.ordinal()));
        arrayList.add(VirtualAppProxy.KEY_DOWNLOAD_STATUS);
        arrayList.add(Integer.valueOf(fileSet.downloadStatus.ordinal()));
        arrayList.add("downloadPauseReason");
        arrayList.add(Integer.valueOf(fileSet.downloadPauseReason.ordinal()));
        arrayList.add("saveFileSetDir");
        String saveFileSetDir = fileSet.saveFileSetDir;
        Intrinsics.checkNotNullExpressionValue(saveFileSetDir, "saveFileSetDir");
        arrayList.add(saveFileSetDir);
        arrayList.add("localCoverPath");
        String localCoverPath = fileSet.localCoverPath;
        Intrinsics.checkNotNullExpressionValue(localCoverPath, "localCoverPath");
        arrayList.add(localCoverPath);
        Object[] array = arrayList.toArray(new Object[0]);
        Intrinsics.checkNotNull(array, "null cannot be cast to non-null type kotlin.Array<T of kotlin.collections.ArraysKt__ArraysJVMKt.toTypedArray>");
        return array;
    }
}
