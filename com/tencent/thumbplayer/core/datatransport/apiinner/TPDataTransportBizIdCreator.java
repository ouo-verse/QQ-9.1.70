package com.tencent.thumbplayer.core.datatransport.apiinner;

import android.text.TextUtils;
import androidx.annotation.NonNull;
import com.tencent.thumbplayer.core.datatransport.util.ITPDataTransportLog;
import com.tencent.thumbplayer.core.datatransport.util.TPDataTransportLogFactory;
import java.util.Iterator;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/* loaded from: classes26.dex */
public class TPDataTransportBizIdCreator {
    private static final int DEFAULT_BIZ_ID = 1000;
    private static final int INVALID_ASSIGNED_BIZ_ID = -2;
    private static final int INVALID_BIZ_ID = -1;
    private static final int MAX_SELF_DEFINED_BIZ_ID = 10000;
    private static final ITPDataTransportLog mLogger = TPDataTransportLogFactory.getInstance().getLogger("TPDataTransportBizIdCreator");
    private final ConcurrentHashMap<Integer, String> mAssignedBizIdMap;
    private final ConcurrentHashMap<Integer, String> mAutoGeneratedBizIdMap;

    /* loaded from: classes26.dex */
    private static class SingletonHolder {
        private static final TPDataTransportBizIdCreator INSTANCE = new TPDataTransportBizIdCreator();

        SingletonHolder() {
        }
    }

    public static TPDataTransportBizIdCreator getInstance() {
        return SingletonHolder.INSTANCE;
    }

    public boolean checkIsValidBizId(int i3) {
        boolean containsKey;
        if (i3 > 10000) {
            synchronized (this.mAssignedBizIdMap) {
                containsKey = this.mAssignedBizIdMap.containsKey(Integer.valueOf(i3));
            }
        } else {
            synchronized (this.mAutoGeneratedBizIdMap) {
                containsKey = this.mAutoGeneratedBizIdMap.containsKey(Integer.valueOf(i3));
            }
        }
        return containsKey;
    }

    public String getBizDataDir(int i3) {
        String str = "";
        if (i3 > 10000) {
            synchronized (this.mAssignedBizIdMap) {
                if (this.mAssignedBizIdMap.containsKey(Integer.valueOf(i3))) {
                    str = this.mAssignedBizIdMap.get(Integer.valueOf(i3));
                }
            }
        } else {
            synchronized (this.mAutoGeneratedBizIdMap) {
                if (this.mAutoGeneratedBizIdMap.containsKey(Integer.valueOf(i3))) {
                    str = this.mAutoGeneratedBizIdMap.get(Integer.valueOf(i3));
                }
            }
        }
        return str;
    }

    public int getDefaultBizId() {
        return 1000;
    }

    public int registerBizId(@NonNull String str) {
        int i3;
        if (TextUtils.isEmpty(str)) {
            mLogger.i("register biz id, data dir is empty!");
            return -1;
        }
        synchronized (this.mAutoGeneratedBizIdMap) {
            Iterator<Map.Entry<Integer, String>> it = this.mAutoGeneratedBizIdMap.entrySet().iterator();
            while (true) {
                if (!it.hasNext()) {
                    i3 = -1;
                    break;
                }
                Map.Entry<Integer, String> next = it.next();
                if (next.getValue().equalsIgnoreCase(str)) {
                    i3 = next.getKey().intValue();
                    break;
                }
            }
            if (i3 == -1) {
                i3 = this.mAutoGeneratedBizIdMap.size() + 1000;
                this.mAutoGeneratedBizIdMap.put(Integer.valueOf(i3), str);
            }
            mLogger.i("register biz id:" + i3 + ", data dir:" + str);
        }
        return i3;
    }

    public void unregisterBizId(int i3) {
        if (i3 > 10000) {
            synchronized (this.mAutoGeneratedBizIdMap) {
                this.mAutoGeneratedBizIdMap.remove(Integer.valueOf(i3));
            }
        } else {
            synchronized (this.mAssignedBizIdMap) {
                this.mAssignedBizIdMap.remove(Integer.valueOf(i3));
            }
        }
    }

    public boolean updateBizIdDataDir(int i3, @NonNull String str) {
        if (!checkIsValidBizId(i3)) {
            return false;
        }
        if (i3 > 10000) {
            synchronized (this.mAssignedBizIdMap) {
                if (this.mAssignedBizIdMap.containsKey(Integer.valueOf(i3))) {
                    this.mAssignedBizIdMap.put(Integer.valueOf(i3), str);
                }
            }
            return true;
        }
        synchronized (this.mAutoGeneratedBizIdMap) {
            if (this.mAutoGeneratedBizIdMap.containsKey(Integer.valueOf(i3))) {
                this.mAutoGeneratedBizIdMap.put(Integer.valueOf(i3), str);
            }
        }
        return true;
    }

    TPDataTransportBizIdCreator() {
        ConcurrentHashMap<Integer, String> concurrentHashMap = new ConcurrentHashMap<>();
        this.mAutoGeneratedBizIdMap = concurrentHashMap;
        this.mAssignedBizIdMap = new ConcurrentHashMap<>();
        concurrentHashMap.put(1000, "");
    }

    public int registerBizId(int i3, String str) {
        boolean z16;
        if (i3 <= 10000) {
            mLogger.e("register assigned bizId:" + i3 + ", is less than 10000");
            return -2;
        }
        synchronized (this.mAssignedBizIdMap) {
            Iterator<Map.Entry<Integer, String>> it = this.mAssignedBizIdMap.entrySet().iterator();
            while (true) {
                if (!it.hasNext()) {
                    z16 = false;
                    break;
                }
                if (it.next().getKey().equals(Integer.valueOf(i3))) {
                    z16 = true;
                    break;
                }
            }
            if (z16) {
                mLogger.i("register assigned bizId:" + i3 + " is already exist!");
                return i3;
            }
            ConcurrentHashMap<Integer, String> concurrentHashMap = this.mAssignedBizIdMap;
            Integer valueOf = Integer.valueOf(i3);
            if (TextUtils.isEmpty(str)) {
                str = "";
            }
            concurrentHashMap.put(valueOf, str);
            return i3;
        }
    }
}
