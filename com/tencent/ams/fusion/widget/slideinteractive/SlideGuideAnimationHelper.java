package com.tencent.ams.fusion.widget.slideinteractive;

import android.graphics.Bitmap;
import com.tencent.ams.fusion.widget.animatorview.animator.AlphaAnimator;
import com.tencent.ams.fusion.widget.animatorview.animator.Animator;
import com.tencent.ams.fusion.widget.animatorview.animator.GroupAnimator;
import com.tencent.ams.fusion.widget.animatorview.animator.SequentialAnimator;
import com.tencent.ams.fusion.widget.animatorview.animator.TranslateAnimator;
import com.tencent.ams.fusion.widget.animatorview.layer.AnimatorLayer;
import com.tencent.ams.fusion.widget.animatorview.layer.BitmapLayer;
import com.tencent.ams.fusion.widget.utils.Utils;
import com.tencent.mobileqq.qfix.redirect.IPatchRedirector;

/* compiled from: P */
/* loaded from: classes3.dex */
public class SlideGuideAnimationHelper {
    static IPatchRedirector $redirector_ = null;
    public static final String ARROW_ICON_BASE64 = "";
    private static final int END_OTHRER_LAYER_DURATION = 220;
    private static final int END_SLIDE_ICON_DURATION = 360;
    private static final int FIRST_STEP_DURATION = 540;
    private static final int SECOND_STEP_DURATION = 640;
    private static final int SLIDE_ANIMATOR_REPEAT_INTERVAL_TIME = 180;
    private static final float SLIDE_ANIMATOR_UP_DISTANCE_DP = -15.0f;

    /* compiled from: P */
    /* loaded from: classes3.dex */
    public static class IconParams {
        static IPatchRedirector $redirector_;
        private float iconHeight;
        private float iconWidth;
        private float iconX;
        private float iconY;

        public IconParams(float f16, float f17, float f18, float f19) {
            IPatchRedirector iPatchRedirector = $redirector_;
            if (iPatchRedirector != null && iPatchRedirector.hasPatch((short) 1)) {
                iPatchRedirector.redirect((short) 1, this, Float.valueOf(f16), Float.valueOf(f17), Float.valueOf(f18), Float.valueOf(f19));
                return;
            }
            this.iconX = f16;
            this.iconY = f17;
            this.iconWidth = f18;
            this.iconHeight = f19;
        }

        public boolean contains(float f16, float f17) {
            IPatchRedirector iPatchRedirector = $redirector_;
            if (iPatchRedirector != null && iPatchRedirector.hasPatch((short) 4)) {
                return ((Boolean) iPatchRedirector.redirect((short) 4, this, Float.valueOf(f16), Float.valueOf(f17))).booleanValue();
            }
            float f18 = this.iconX;
            if (f16 >= f18 && f16 <= f18 + this.iconWidth) {
                float f19 = this.iconY;
                if (f17 >= f19 && f17 <= f19 + this.iconHeight) {
                    return true;
                }
            }
            return false;
        }

        public float getIconX() {
            IPatchRedirector iPatchRedirector = $redirector_;
            if (iPatchRedirector != null && iPatchRedirector.hasPatch((short) 2)) {
                return ((Float) iPatchRedirector.redirect((short) 2, (Object) this)).floatValue();
            }
            return this.iconX;
        }

        public float getIconY() {
            IPatchRedirector iPatchRedirector = $redirector_;
            if (iPatchRedirector != null && iPatchRedirector.hasPatch((short) 3)) {
                return ((Float) iPatchRedirector.redirect((short) 3, (Object) this)).floatValue();
            }
            return this.iconY;
        }

        public String toString() {
            IPatchRedirector iPatchRedirector = $redirector_;
            if (iPatchRedirector != null && iPatchRedirector.hasPatch((short) 5)) {
                return (String) iPatchRedirector.redirect((short) 5, (Object) this);
            }
            return "IconParams{iconX=" + this.iconX + ", iconY=" + this.iconY + ", iconWidth=" + this.iconWidth + ", iconHeight=" + this.iconHeight + '}';
        }
    }

    public SlideGuideAnimationHelper() {
        IPatchRedirector iPatchRedirector = $redirector_;
        if (iPatchRedirector != null && iPatchRedirector.hasPatch((short) 1)) {
            iPatchRedirector.redirect((short) 1, (Object) this);
        }
    }

    private static AlphaAnimator createAlphaAnimator(AnimatorLayer animatorLayer, float f16, float f17) {
        AlphaAnimator alphaAnimator = new AlphaAnimator(animatorLayer, f16, f17);
        alphaAnimator.setPathInterpolator(0.33f, 0.0f, 0.67f, 1.0f);
        return alphaAnimator;
    }

    private static Animator createArrowIconStep1Animator(AnimatorLayer animatorLayer) {
        TranslateAnimator createTranslateAnimator = createTranslateAnimator(animatorLayer, 0.0f, Utils.dp2px(SLIDE_ANIMATOR_UP_DISTANCE_DP), 540L);
        createTranslateAnimator.setDuration(540L);
        GroupAnimator groupAnimator = new GroupAnimator(animatorLayer, createAlphaAnimator(animatorLayer, 0.2f, 1.0f), createTranslateAnimator);
        groupAnimator.setDuration(540L);
        return groupAnimator;
    }

    private static Animator createArrowIconStep2Animator(AnimatorLayer animatorLayer) {
        GroupAnimator groupAnimator = new GroupAnimator(animatorLayer, createAlphaAnimator(animatorLayer, 1.0f, 0.2f), createTranslateAnimator(animatorLayer, Utils.dp2px(SLIDE_ANIMATOR_UP_DISTANCE_DP), 0.0f, 640L));
        groupAnimator.setDuration(640L);
        return groupAnimator;
    }

    private static AlphaAnimator createEndAlphaAnimator(AnimatorLayer animatorLayer) {
        AlphaAnimator alphaAnimator = new AlphaAnimator(animatorLayer, 1.0f, 0.0f);
        alphaAnimator.setPathInterpolator(0.17f, 0.17f, 0.67f, 1.0f);
        return alphaAnimator;
    }

    private static TranslateAnimator createEndTranslateAnimator(AnimatorLayer animatorLayer, float f16, float f17) {
        TranslateAnimator translateAnimator = new TranslateAnimator(animatorLayer, 0.0f, 0.0f, f16, f17);
        translateAnimator.setPathInterpolator(0.17f, 0.17f, 0.67f, 1.0f);
        return translateAnimator;
    }

    private static Animator createSlideIconStep1Animator(AnimatorLayer animatorLayer, IconParams iconParams) {
        return createTranslateAnimator(animatorLayer, 0.0f, Utils.dp2px(SLIDE_ANIMATOR_UP_DISTANCE_DP), 540L);
    }

    private static Animator createSlideIconStep2Animator(AnimatorLayer animatorLayer, IconParams iconParams) {
        return createTranslateAnimator(animatorLayer, Utils.dp2px(SLIDE_ANIMATOR_UP_DISTANCE_DP), 0.0f, 640L);
    }

    private static TranslateAnimator createTranslateAnimator(AnimatorLayer animatorLayer, float f16, float f17, long j3) {
        TranslateAnimator translateAnimator = new TranslateAnimator(animatorLayer, 0.0f, 0.0f, f16, f17);
        translateAnimator.setDuration(j3);
        translateAnimator.setPathInterpolator(0.33f, 0.0f, 0.67f, 1.0f);
        return translateAnimator;
    }

    public static AnimatorLayer getArrowIconAnimatorLayer(Bitmap bitmap, IconParams iconParams, Animator.AnimatorListener animatorListener) {
        if (bitmap != null && iconParams != null) {
            AnimatorLayer height = new BitmapLayer(bitmap).setX(iconParams.iconX).setY(iconParams.iconY).setWidth((int) iconParams.iconWidth).setHeight((int) iconParams.iconHeight);
            SequentialAnimator sequentialAnimator = new SequentialAnimator(height);
            sequentialAnimator.setAnimatorListener(animatorListener);
            sequentialAnimator.addAnimator(createArrowIconStep1Animator(height));
            sequentialAnimator.addAnimator(createArrowIconStep2Animator(height));
            sequentialAnimator.setRepeatCount(0);
            sequentialAnimator.setRepeatMode(1);
            sequentialAnimator.setRepeatInterval(180L);
            height.setAnimator(sequentialAnimator);
            return height;
        }
        return null;
    }

    public static Animator getArrowIconEndAnimator(AnimatorLayer animatorLayer, Animator.AnimatorListener animatorListener) {
        if (animatorLayer == null) {
            return null;
        }
        GroupAnimator groupAnimator = new GroupAnimator(animatorLayer, createEndAlphaAnimator(animatorLayer), createEndTranslateAnimator(animatorLayer, 0.0f, Utils.dp2px(-80.0f)));
        groupAnimator.setDuration(220L);
        groupAnimator.setAnimatorListener(animatorListener);
        return groupAnimator;
    }

    public static AnimatorLayer getSlideIconAnimatorLayer(Bitmap bitmap, IconParams iconParams, Animator.AnimatorListener animatorListener) {
        if (bitmap != null && iconParams != null) {
            AnimatorLayer height = new BitmapLayer(bitmap).setX(iconParams.iconX).setY(iconParams.iconY).setWidth((int) iconParams.iconWidth).setHeight((int) iconParams.iconHeight);
            SequentialAnimator sequentialAnimator = new SequentialAnimator(height);
            sequentialAnimator.setAnimatorListener(animatorListener);
            sequentialAnimator.addAnimator(createSlideIconStep1Animator(height, iconParams));
            sequentialAnimator.addAnimator(createSlideIconStep2Animator(height, iconParams));
            sequentialAnimator.setRepeatCount(0);
            sequentialAnimator.setRepeatInterval(180L);
            sequentialAnimator.setRepeatMode(1);
            height.setAnimator(sequentialAnimator);
            return height;
        }
        return null;
    }

    public static Animator getSlideIconEndAnimator(AnimatorLayer animatorLayer, Animator.AnimatorListener animatorListener, float f16, boolean z16) {
        AlphaAnimator alphaAnimator = null;
        if (animatorLayer == null) {
            return null;
        }
        TranslateAnimator createEndTranslateAnimator = createEndTranslateAnimator(animatorLayer, 0.0f, f16);
        AlphaAnimator createEndAlphaAnimator = createEndAlphaAnimator(animatorLayer);
        Animator[] animatorArr = new Animator[2];
        if (z16) {
            alphaAnimator = createEndAlphaAnimator;
        }
        animatorArr[0] = alphaAnimator;
        animatorArr[1] = createEndTranslateAnimator;
        GroupAnimator groupAnimator = new GroupAnimator(animatorLayer, animatorArr);
        groupAnimator.setDuration(360L);
        groupAnimator.setAnimatorListener(animatorListener);
        return groupAnimator;
    }

    public static Animator getSubTitleEndAnimator(AnimatorLayer animatorLayer) {
        if (animatorLayer == null) {
            return null;
        }
        GroupAnimator groupAnimator = new GroupAnimator(animatorLayer, createEndAlphaAnimator(animatorLayer), createEndTranslateAnimator(animatorLayer, 0.0f, Utils.dp2px(-80.0f)));
        groupAnimator.setDuration(220L);
        return groupAnimator;
    }

    public static Animator getTitleEndAnimator(AnimatorLayer animatorLayer) {
        if (animatorLayer == null) {
            return null;
        }
        GroupAnimator groupAnimator = new GroupAnimator(animatorLayer, createEndAlphaAnimator(animatorLayer), createEndTranslateAnimator(animatorLayer, 0.0f, Utils.dp2px(-80.0f)));
        groupAnimator.setDuration(220L);
        return groupAnimator;
    }
}
