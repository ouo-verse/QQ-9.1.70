package com.tencent.mapsdk.internal;

import android.content.Context;
import android.text.TextUtils;
import com.tencent.map.lib.models.GeoPoint;
import com.tencent.mapsdk.internal.kp;
import java.io.Closeable;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Iterator;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import org.json.JSONObject;

/* compiled from: P */
/* loaded from: classes9.dex */
public class sm {

    /* renamed from: a, reason: collision with root package name */
    public static final String f150328a = "china";

    /* renamed from: b, reason: collision with root package name */
    public static final String f150329b = "inland";

    /* renamed from: c, reason: collision with root package name */
    public static final String f150330c = "inland_without_sar";

    /* renamed from: d, reason: collision with root package name */
    public static final String f150331d = "taiwan";

    /* renamed from: e, reason: collision with root package name */
    public static final String f150332e = "124.240000,39.863000:127.060000,41.420000:128.320000,41.340000:128.338164,41.966811:129.070015,42.006633:129.392187,42.394602:129.544000,42.337000:129.757733,42.443019:129.915455,42.958121:130.581000,42.411000:130.664000,42.409000:130.660000,42.750000:131.056800,42.832500:131.362267,43.147780:131.359097,44.050378:131.184574,44.758711:131.911825,45.219501:133.163642,44.937724:135.144366,48.211013:135.128000,48.597000:131.071828,47.811040:130.773650,49.035551:128.751969,49.726565:125.969075,53.154351:123.347269,53.704738:120.827269,53.390754:119.713597,52.637780:120.321762,52.210396:118.926328,50.226355:117.662701,49.700280:116.622716,49.956516:115.284508,48.000368:116.104389,47.451176:118.485448,47.755809:119.550866,46.911548:117.463642,46.804509:113.640000,45.105329:111.969090,45.243847:111.267254,44.465714:111.589045,43.737317:109.905388,42.763982:107.448179,42.614694:105.337313,41.946215:100.992746,42.800196:96.838239,42.914056:95.070866,44.957807:91.816477,45.242319:91.161836,46.742245:90.130007,47.948495:88.699097,48.336174:87.883642,49.202090:86.809933,49.172099:85.459963,48.255788:85.328157,47.119427:82.919985,47.328453:82.134523,45.619623:82.396343,45.291415:81.735685,45.446091:79.797183,45.018009:80.618157,43.259401:80.112694,42.868284:80.120896,42.260590:77.976351,41.282314:76.788172,41.096389:76.197254,40.491205:75.361880,40.846808:73.365418,39.794560:73.634523,38.503352:74.669067,38.423003:74.896815,37.310540:74.429528,37.294106:74.454501,36.972073:75.734530,36.578999:75.962701,35.784605:77.852731,35.299899:78.205470,34.574291:78.973568,32.910437:78.263619,32.582183:78.649985,30.992536:81.199112,29.930890:81.625396,30.231654:85.988179,27.769037:88.674612,27.787987:88.840910,27.047339:89.241858,27.247275:89.644552,28.077447:90.426358,28.002589:91.425425,27.605415:92.127284,26.721880:93.834582,26.907073:95.855604,28.198876:97.000074,27.593593:97.491836,27.849236:97.700896,28.296779:98.301769,27.394792:98.605433,27.417494:98.502702,26.026786:97.440895,25.088802:97.485448,23.745403:98.497224,24.030523:98.809985,23.174956:99.324515,22.945024:99.099993,22.084196:100.205485,21.391178:101.003735,21.463004:101.278198,21.122876:101.931836,21.129823:101.785481,22.197373:102.650063,22.558783:103.074619,22.382137:103.979093,22.474798:104.809933,22.767793:105.399978,23.049961:106.469971,22.704082:106.610899,21.787060:107.897261,21.372454:107.490036,19.305984:109.748489,14.674666:110.039063,11.480025:107.666016,6.271618:111.752930,3.281824:112.939454,3.413421:115.018257,6.054474:118.674316,10.790140:119.164223,12.212996:119.707031,18.020528:121.959229,21.677848:122.699226,23.809795:127.303391,24.447079:127.390663,31.568056:124.335754,32.823666";

    /* renamed from: f, reason: collision with root package name */
    public static final String f150333f = "124.240000,39.863000:127.060000,41.420000:128.320000,41.340000:128.338164,41.966811:129.070015,42.006633:129.392187,42.394602:129.544000,42.337000:129.757733,42.443019:129.915455,42.958121:130.581000,42.411000:130.664000,42.409000:130.660000,42.750000:131.056800,42.832500:131.362267,43.147780:131.359097,44.050378:131.184574,44.758711:131.911825,45.219501:133.163642,44.937724:135.144366,48.211013:135.128000,48.597000:131.071828,47.811040:130.773650,49.035551:128.751969,49.726565:125.969075,53.154351:123.347269,53.704738:120.827269,53.390754:119.713597,52.637780:120.321762,52.210396:118.926328,50.226355:117.662701,49.700280:116.622716,49.956516:115.284508,48.000368:116.104389,47.451176:118.485448,47.755809:119.550866,46.911548:117.463642,46.804509:113.640000,45.105329:111.969090,45.243847:111.267254,44.465714:111.589045,43.737317:109.905388,42.763982:107.448179,42.614694:105.337313,41.946215:100.992746,42.800196:96.838239,42.914056:95.070866,44.957807:91.816477,45.242319:91.161836,46.742245:90.130007,47.948495:88.699097,48.336174:87.883642,49.202090:86.809933,49.172099:85.459963,48.255788:85.328157,47.119427:82.919985,47.328453:82.134523,45.619623:82.396343,45.291415:81.735685,45.446091:79.797183,45.018009:80.618157,43.259401:80.112694,42.868284:80.120896,42.260590:77.976351,41.282314:76.788172,41.096389:76.197254,40.491205:75.361880,40.846808:73.365418,39.794560:73.634523,38.503352:74.669067,38.423003:74.896815,37.310540:74.429528,37.294106:74.454501,36.972073:75.734530,36.578999:75.962701,35.784605:77.852731,35.299899:78.205470,34.574291:78.973568,32.910437:78.263619,32.582183:78.649985,30.992536:81.199112,29.930890:81.625396,30.231654:85.988179,27.769037:88.674612,27.787987:88.840910,27.047339:89.241858,27.247275:89.644552,28.077447:90.426358,28.002589:91.425425,27.605415:92.127284,26.721880:93.834582,26.907073:95.855604,28.198876:97.000074,27.593593:97.491836,27.849236:97.700896,28.296779:98.301769,27.394792:98.605433,27.417494:98.502702,26.026786:97.440895,25.088802:97.485448,23.745403:98.497224,24.030523:98.809985,23.174956:99.324515,22.945024:99.099993,22.084196:100.205485,21.391178:101.003735,21.463004:101.278198,21.122876:101.931836,21.129823:101.785481,22.197373:102.650063,22.558783:103.074619,22.382137:103.979093,22.474798:104.809933,22.767793:105.399978,23.049961:106.469971,22.704082:106.610899,21.787060:107.897261,21.372454:107.490036,19.305984:109.748489,14.674666:110.039063,11.480025:107.666016,6.271618:111.752930,3.281824:112.939454,3.413421:115.018257,6.054474:118.674316,10.790140:119.164223,12.212996:119.707031,18.020528:121.397269,20.720622:118.487770,21.778166:119.578789,24.089008:120.465831,25.121382:121.207406,25.815692:121.869972,25.849447:122.742859,25.209509:122.699226,23.809795:127.303391,24.447079:127.390663,31.568056:124.335754,32.823666";

    /* renamed from: g, reason: collision with root package name */
    public static final String f150334g = "124.335754,32.823666:127.390663,31.568056:127.303391,24.447079:122.699226,23.809795:122.742859,25.209509:121.869972,25.849447:121.207406,25.815692:120.465831,25.121382:119.578789,24.089008:118.507109246954215,21.806939371710286:115.420950314174675,22.0797463775198:114.509661096336131,22.156140408204692:114.506688026933645,22.389645451902645:114.456995958171618,22.459719125224478:114.458477914429494,22.553576354890058:114.436742555980629,22.563456063275908:114.272739396775506,22.562962077856614:114.235173504258427,22.54295606933858:114.22191142843927,22.552558813116274:114.220352283155847,22.551793567635766:114.217590564937979,22.551885624909698:114.215197075815823,22.554094999483993:114.212711529419735,22.55354265584042:114.207464264805779,22.55354265584042:114.206055150274551,22.554727832299186:114.195496819195,22.551701510361838:114.192919215524981,22.552622083101127:114.19080189822462,22.552161796731482:114.18316884605764,22.553682807437443:114.181798063556457,22.557553252146658:114.179137132818866,22.557553252146658:114.174944151050553,22.557956423470532:114.172363854577753,22.55852086332396:114.168170872809426,22.556585640969352:114.166880724573033,22.55900466891261:114.160752520450103,22.552150756406714:114.157688418388645,22.551989487877165:114.153253533826003,22.539168639777895:114.135952895384136,22.539332674665065:114.117614740292964,22.527107237937624:114.095386673515804,22.533219956301345:114.085939745135505,22.527662939607055:114.089829656821522,22.520438817904477:114.084272640127224,22.513214696201896:114.068712993383215,22.514881801210183:114.058154661664062,22.500433557805028:114.031092912247857,22.506389201854397:114.016767937853302,22.498032740264382:113.999957118074732,22.505385499556851:113.874590219493271,22.416832690241375:113.868620367179872,22.326289930154765:113.848720859468528,22.274551210105273:113.817459995820982,22.215937574142544:113.828632204132305,22.180170409195064:113.877575145649985,22.144209434595975:113.917374161072658,22.128289828426901:113.944238496482981,22.13525465612587:113.960158102652059,22.151174262294944:114.230791407526311,22.151174262294944:114.256660767551068,22.133264705354737:114.290489930660343,22.142219483824842:114.502952373648483,22.143092335081857:118.48777,21.778166:121.397269,20.720622:119.707031,18.020528:119.164223,12.212996:118.674316,10.79014:118.420677138977851,10.457796980020891:113.589416524149854,22.090006007724405:113.587091602249671,22.095353812187078:113.613653680252554,22.114258354189133:113.588048794249772,22.178868814196154:113.595945628250632,22.200166336198471:113.577519682248621,22.200644932198522:113.556700756246357,22.213567024199925:113.546410942245245,22.209977554199536:113.543300068244903,22.210456150199587:113.539710598244511,22.205909488199094:113.532531658243741,22.178150920196078:113.553691728296229,22.143365968076598:113.553912234401722,22.101028795821954:113.5607688222468,22.093439428186869:113.582544940249164,22.094875216187024:118.390464595772997,10.433837252642643:112.986216750221558,3.433704137263927:111.75293,3.281824:107.666016,6.271618:110.039063,11.480025:109.748489,14.674666:107.490036,19.305984:107.897261,21.372454:106.610899,21.78706:106.469971,22.704082:105.399978,23.049961:104.809933,22.767793:103.979093,22.474798:103.074619,22.382137:102.650063,22.558783:101.785481,22.197373:101.931836,21.129823:101.278198,21.122876:101.003735,21.463004:100.205485,21.391178:99.099993,22.084196:99.324515,22.945024:98.809985,23.174956:98.497224,24.030523:97.485448,23.745403:97.440895,25.088802:98.502702,26.026786:98.605433,27.417494:98.301769,27.394792:97.700896,28.296779:97.491836,27.849236:97.000074,27.593593:95.855604,28.198876:93.834582,26.907073:92.127284,26.72188:91.425425,27.605415:90.426358,28.002589:89.644552,28.077447:89.241858,27.247275:88.84091,27.047339:88.674612,27.787987:85.988179,27.769037:81.625396,30.231654:81.199112,29.93089:78.649985,30.992536:78.263619,32.582183:78.973568,32.910437:78.20547,34.574291:77.852731,35.299899:75.962701,35.784605:75.73453,36.578999:74.454501,36.972073:74.429528,37.294106:74.896815,37.31054:74.669067,38.423003:73.634523,38.503352:73.365418,39.79456:75.36188,40.846808:76.197254,40.491205:76.788172,41.096389:77.976351,41.282314:80.120896,42.26059:80.112694,42.868284:80.618157,43.259401:79.797183,45.018009:81.735685,45.446091:82.396343,45.291415:82.134523,45.619623:82.919985,47.328453:85.328157,47.119427:85.459963,48.255788:86.809933,49.172099:87.883642,49.20209:88.699097,48.336174:90.130007,47.948495:91.161836,46.742245:91.816477,45.242319:95.070866,44.957807:96.838239,42.914056:100.992746,42.800196:105.337313,41.946215:107.448179,42.614694:109.905388,42.763982:111.589045,43.737317:111.267254,44.465714:111.96909,45.243847:113.64,45.105329:117.463642,46.804509:119.550866,46.911548:118.485448,47.755809:116.104389,47.451176:115.284508,48.000368:116.622716,49.956516:117.662701,49.70028:118.926328,50.226355:120.321762,52.210396:119.713597,52.63778:120.827269,53.390754:123.347269,53.704738:125.969075,53.154351:128.751969,49.726565:130.77365,49.035551:131.071828,47.81104:135.128,48.597:135.144366,48.211013:133.163642,44.937724:131.911825,45.219501:131.184574,44.758711:131.359097,44.050378:131.362267,43.14778:131.0568,42.8325:130.66,42.75:130.664,42.409:130.581,42.411:129.915455,42.958121:129.757733,42.443019:129.544,42.337:129.392187,42.394602:129.070015,42.006633:128.338164,41.966811:128.32,41.34:127.06,41.42:124.24,39.863";

    /* renamed from: h, reason: collision with root package name */
    public static final String f150335h = "121.397269,20.720622:118.487770,21.778166:119.578789,24.089008:120.465831,25.121382:121.207406,25.815692:121.869972,25.849447:122.742859,25.209509:122.699226,23.809795:121.959229,21.677848";

    /* renamed from: i, reason: collision with root package name */
    private static ConcurrentHashMap<String, ge[]> f150336i = new ConcurrentHashMap<>();

    /* renamed from: j, reason: collision with root package name */
    private static volatile sm f150337j;

    /* renamed from: k, reason: collision with root package name */
    private ReentrantReadWriteLock f150338k = new ReentrantReadWriteLock();

    /* renamed from: l, reason: collision with root package name */
    private String f150339l = null;

    /* renamed from: m, reason: collision with root package name */
    private String f150340m = null;

    /* renamed from: n, reason: collision with root package name */
    private boolean f150341n = false;

    /* renamed from: o, reason: collision with root package name */
    private volatile boolean f150342o;

    sm() {
    }

    static /* synthetic */ boolean a(sm smVar) {
        smVar.f150341n = true;
        return true;
    }

    private static void c() {
    }

    private static ge[] d(String str) {
        ge[] geVarArr = null;
        if (str != null && str.length() != 0) {
            String[] split = str.split(":");
            if (split.length == 0) {
                return null;
            }
            geVarArr = new ge[split.length];
            for (int i3 = 0; i3 < split.length; i3++) {
                String[] split2 = split[i3].split(",");
                geVarArr[i3] = y.b(new GeoPoint((int) (Double.parseDouble(split2[1]) * 1000000.0d), (int) (Double.parseDouble(split2[0]) * 1000000.0d)));
            }
        }
        return geVarArr;
    }

    public final String b() {
        FileInputStream fileInputStream;
        this.f150338k.readLock().lock();
        try {
            fileInputStream = new FileInputStream(new File(this.f150339l));
        } catch (Throwable unused) {
            fileInputStream = null;
        }
        try {
            String str = new String(ku.b(fileInputStream), "UTF-8");
            ku.a((Closeable) fileInputStream);
            this.f150338k.readLock().unlock();
            return str;
        } catch (Throwable unused2) {
            ku.a((Closeable) fileInputStream);
            this.f150338k.readLock().unlock();
            return null;
        }
    }

    public static ge[] c(String str) {
        return f150336i.get(str);
    }

    public static sm a() {
        if (f150337j == null) {
            synchronized (sm.class) {
                if (f150337j == null) {
                    f150337j = new sm();
                }
            }
        }
        return f150337j;
    }

    public static int b(String str) {
        ge[] d16;
        ge[] d17;
        ge[] d18;
        int i3 = 0;
        if (str != null && str.length() != 0) {
            try {
                JSONObject jSONObject = new JSONObject(str);
                Iterator keys = jSONObject.keys();
                while (keys.hasNext()) {
                    String str2 = (String) keys.next();
                    if ("version".equals(str2)) {
                        i3 = jSONObject.optInt(str2);
                    } else {
                        ge[] d19 = d(jSONObject.optString(str2));
                        if (d19 != null) {
                            f150336i.put(str2, d19);
                        }
                    }
                }
                if (!f150336i.containsKey(f150328a) && (d18 = d(f150332e)) != null) {
                    f150336i.put(f150328a, d18);
                }
                if (!f150336i.containsKey(f150329b) && (d17 = d(f150333f)) != null) {
                    f150336i.put(f150329b, d17);
                }
                if (!f150336i.containsKey(f150331d) && (d16 = d(f150335h)) != null) {
                    f150336i.put(f150331d, d16);
                }
            } catch (Throwable unused) {
            }
        }
        return i3;
    }

    public final void a(Context context) {
        if (this.f150341n || this.f150342o) {
            return;
        }
        f150336i.put(f150328a, d(f150332e));
        f150336i.put(f150329b, d(f150333f));
        f150336i.put(f150330c, d(f150334g));
        f150336i.put(f150331d, d(f150335h));
        if (context != null) {
            this.f150339l = context.getFilesDir() + "/frontiers.dat";
            this.f150340m = this.f150339l + ".bak";
        }
        kp.a((kp.g) new kp.g<Boolean>() { // from class: com.tencent.mapsdk.internal.sm.1
            private Boolean a() throws Exception {
                sm.this.f150342o = true;
                String b16 = sm.this.b();
                if (!TextUtils.isEmpty(b16)) {
                    sm.b(b16);
                }
                sm.this.f150342o = false;
                sm.a(sm.this);
                return Boolean.TRUE;
            }

            @Override // java.util.concurrent.Callable
            public final /* synthetic */ Object call() throws Exception {
                sm.this.f150342o = true;
                String b16 = sm.this.b();
                if (!TextUtils.isEmpty(b16)) {
                    sm.b(b16);
                }
                sm.this.f150342o = false;
                sm.a(sm.this);
                return Boolean.TRUE;
            }
        }).a((kp.b.a) Boolean.FALSE);
    }

    public final boolean a(String str) {
        this.f150338k.writeLock().lock();
        File file = new File(this.f150339l);
        File file2 = new File(this.f150340m);
        if (file2.exists() && !file2.delete()) {
            file2.deleteOnExit();
            return false;
        }
        FileOutputStream fileOutputStream = null;
        try {
            if (!file.exists() || file.renameTo(file2)) {
                FileOutputStream fileOutputStream2 = new FileOutputStream(file);
                try {
                    fileOutputStream2.write(str.getBytes("UTF-8"));
                    fileOutputStream2.flush();
                    ku.a(fileOutputStream2);
                    file2.delete();
                    this.f150338k.writeLock().unlock();
                    return true;
                } catch (Throwable unused) {
                    fileOutputStream = fileOutputStream2;
                }
            }
        } catch (Throwable unused2) {
        }
        ku.a(fileOutputStream);
        file2.renameTo(file);
        this.f150338k.writeLock().unlock();
        return false;
    }

    public static boolean a(ge geVar, ge[] geVarArr) {
        int i3;
        if (geVarArr == null || geVarArr.length < 3) {
            return false;
        }
        int length = geVarArr.length - 1;
        int i16 = 0;
        boolean z16 = false;
        while (i16 < geVarArr.length) {
            ge geVar2 = geVarArr[i16];
            double d16 = geVar2.f148479b;
            double d17 = geVar.f148479b;
            if ((d16 >= d17 || geVarArr[length].f148479b < d17) && (geVarArr[length].f148479b >= d17 || d16 < d17)) {
                i3 = i16;
            } else {
                double d18 = geVar2.f148480c;
                double d19 = geVar.f148480c;
                if (d18 > d19) {
                    i3 = i16;
                    if (geVarArr[length].f148480c > d19) {
                    }
                } else {
                    i3 = i16;
                }
                ge geVar3 = geVarArr[length];
                z16 ^= d18 + (((d17 - d16) / (geVar3.f148479b - d16)) * (geVar3.f148480c - d18)) < d19;
            }
            i16 = i3 + 1;
            length = i3;
        }
        return z16;
    }

    public static boolean a(ge[] geVarArr, ge[] geVarArr2) {
        boolean z16;
        int length = geVarArr.length;
        int i3 = 0;
        boolean z17 = false;
        while (true) {
            if (i3 >= length) {
                z16 = false;
                break;
            }
            z17 |= a(geVarArr[i3], geVarArr2);
            if (z17) {
                z16 = true;
                break;
            }
            i3++;
        }
        boolean z18 = false;
        boolean z19 = false;
        for (ge geVar : geVarArr2) {
            z18 |= a(geVar, geVarArr);
            if (z18) {
                z19 = true;
            }
        }
        return z16 || z19;
    }
}
