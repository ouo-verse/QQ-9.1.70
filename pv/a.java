package pv;

import com.tencent.av.opengl.program.TextureProgram;
import com.tencent.qqmini.miniapp.widget.camera.CameraFilterEngine;

/* compiled from: P */
/* loaded from: classes3.dex */
public class a extends TextureProgram {
    public a() {
        super("uniform  mat4   uMatrix;\nuniform  mat4 uTextureMatrix;\nattribute vec2  aPosition ;\nvarying vec2 vTextureCoord;\nvoid main(void)\n{\nvec4 pos = vec4(aPosition, 0.0, 1.0);\n gl_Position = uMatrix * pos;\n vTextureCoord = (uTextureMatrix * (pos+vec4(0.5,0.5,0.0,0.0))).xy;\n}\n", "\n\nprecision highp float;\nprecision highp int;\nvarying vec2 vTextureCoord;\t\t\t\t//vTextureCoord;\nuniform sampler2D uTextureSampler0;\t\t\t// \u539f\u59cb\u7eb9\u7406 rgba\nuniform float fWidth;\t\t\t// \u7eb9\u7406\u5bbd \u77ed\u8fb9\nuniform float fHeight;\t\t\t// \u7eb9\u7406\u9ad8 \u957f\u8fb9\n\n\nvec4 averageSmapling(float x,float y,float dx,float dy){\n    vec4 c0=texture2D(uTextureSampler0,vec2(x,y));\n    vec4 c1=texture2D(uTextureSampler0,vec2(x+dx,y));\n    vec4 c2=texture2D(uTextureSampler0,vec2(x,y+dy));\n    vec4 c3=texture2D(uTextureSampler0,vec2(x+dx,y+dy));\n    return (c0+c1+c2+c3)/4.;\n}\n\nvec2 calcuBasePos(float t,float shifty,float textrureCoX,float textrureCoY){\n    vec2 pos=vec2(floor(fWidth*textrureCoX),floor(fHeight*textrureCoY));\n    return vec2(pos.x*t,mod(pos.y*shifty,fHeight));\n}\n\n//\u9876\u70b9\u65cb\u8f6c\u540e\uff0c\u7eb9\u7406\u5750\u6807\u539f\u70b9\u53d8\u4e3a\u53f3\u4e0b\u89d2\uff0cx\u8f74\u5411\u4e0a\uff0cy\u8f74\u5411\u5de6\nvoid main() {\n\n    vec2 samplingPos =vec2(0.0,0.0);\n\tvec4 texel=vec4(0.0,0.0,0.0,0.0);\n\t\n\tvec3 offset = vec3(0.0, 0.5, 0.5);\n\t//\u989c\u8272\u7cfb\u6570\u77e9\u9635\n\tvec3 ycoeff = vec3(0.2990, 0.5870, 0.1140);\n\tvec3 ucoeff = vec3(-0.1687,-0.3313, 0.5);\n\tvec3 vcoeff = vec3(0.5,-0.4187,-0.0813);\n\n\tvec2 nowTxtPos = vTextureCoord;\n\tvec2 size = vec2(fWidth, fHeight);\n\n\tvec2 hehe =vec2(0.0,0.0);\n\n    float dx = 1.0/fWidth;\n    float dy = 1.0/fHeight;\n    // y \u53601/4\n\tif(nowTxtPos.y <= 1.0 && nowTxtPos.y >= 0.75){ //1\n\t    //\u79fb\u5230\u539f\u70b9\n        //nowTxtPos.y = (nowTxtPos.y - 0.75)* 4.0;\n\t\t//nowTxtPos.x = nowTxtPos.x* 1.0;\n        // y base postion\n        //vec2 basePos1 = (nowTxtPos * size +hehe) ;\n        //vec2 basePos =vec2(int(basePos1.x),int(basePos1.y));//\u53d6\u6574\n        vec2 basePos = calcuBasePos(1.0,4.0,nowTxtPos.x,nowTxtPos.y - 0.75);\n\t\tfloat y1,y2,y3,y4;\n\n\t\t//1\n\t\tbasePos.y -= 0.0;\n\t\tbasePos.x -= 0.0;\n\t\tsamplingPos =  basePos / size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty1 = dot(texel.rgb, ycoeff);\n\t\ty1 += offset.x;\n\n\t    //2\n\t\tbasePos.y-=1.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty2 = dot(texel.rgb, ycoeff);\n\t\ty2 += offset.x;\n\n\t    //3\n\t\tbasePos.y-=1.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty3 = dot(texel.rgb, ycoeff);\n\t\ty3 += offset.x;\n\n\t    //4\n\t\tbasePos.y-=1.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = texture2D(uTextureSampler0, samplingPos);\n\t\ty4 = dot(texel.rgb, ycoeff);\n\t\ty4 += offset.x;\n\n\t\t//\u5199\u5165\u4eae\u5ea6\u503c\n\t\tgl_FragColor = vec4(y1, y2, y3, y4);\n\n\t}\n\t//\u91c7\u96c6V\n\telse if(nowTxtPos.y >=0.625 && nowTxtPos.y < 0.75 && nowTxtPos.x >= 0.5)\n\t{\n\t\t//\u79fb\u5230\u539f\u70b9\n        //nowTxtPos.y = (nowTxtPos.y - 0.625)* 8.0;\n\n        //nowTxtPos.x = (nowTxtPos.x-0.5)* 2.0;\n\t\t//vec2 basePos1 = (nowTxtPos * size +hehe) ;//\u91c7\u6837\u57fa\u51c6\u70b9\n        //vec2 basePos =vec2(int(basePos1.x),int(basePos1.y));//\u53d6\u6574\n        vec2 basePos = calcuBasePos(2.0,8.0,nowTxtPos.x-0.5,nowTxtPos.y - 0.625);\n\t\t//\u5f97\u5230\u50cf\u7d20\u5750\u6807\n        float v1,v2,v3,v4;\n\n        //1\n        basePos.y -= 0.0;\n\t\tbasePos.x -= 0.0;\n\t\tsamplingPos = basePos/size;\n\t\ttexel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv1 = dot(texel.rgb, vcoeff);\n\t\tv1 += offset.z;\n\t\t//2\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv2 = dot(texel.rgb, vcoeff);\n\t\tv2 += offset.z;\n\t\t//3\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv3 = dot(texel.rgb, vcoeff);\n\t\tv3 += offset.z;\n\t\t//4\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tv4 = dot(texel.rgb, vcoeff);\n\t\tv4 += offset.z;\n\n\n\t\t//\u5199\u5165V\u503c\n        gl_FragColor = vec4(v1, v2, v3, v4);\n\n\t}\n\t//\u5947\u6570\u884c\u91c7\u96c6U\n\telse if(nowTxtPos.y >=0.625 && nowTxtPos.y < 0.75 && nowTxtPos.x <= 0.5 )\n\t{\n\n\t\t//\u79fb\u5230\u539f\u70b9\n        //nowTxtPos.y = (nowTxtPos.y - 0.625)* 8.0;\n        //nowTxtPos.x = nowTxtPos.x* 2.0;\n        //vec2 basePos1 = (nowTxtPos * size +hehe) ;//\u91c7\u6837\u57fa\u51c6\u70b9\n        //vec2 basePos =vec2(int(basePos1.x),int(basePos1.y));//\u53d6\u6574\n\n        vec2 basePos = calcuBasePos(2.0,8.0,nowTxtPos.x,nowTxtPos.y - 0.625);\n        //\u5f97\u5230\u50cf\u7d20\u5750\u6807\n        float u1,u2,u3,u4;\n\n        //1\n        basePos.y -= 0.0;\n        basePos.x += 0.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu1 = dot(texel.rgb, ucoeff);\n\t\tu1 += offset.y;\n\t\t//2\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu2 = dot(texel.rgb, ucoeff);\n\t\tu2 += offset.y;\n\t\t//3\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu3 = dot(texel.rgb, ucoeff);\n\t\tu3 += offset.y;\n\t\t//4\n        basePos.y -= 2.0;\n\t\tsamplingPos = basePos/size;\n        texel = averageSmapling(samplingPos.x,samplingPos.y,dx,dy);\n\t\tu4 = dot(texel.rgb, ucoeff);\n\t\tu4 += offset.y;\n\n\t\t//\u5199\u5165U\u503c\n        gl_FragColor = vec4(u1, u2, u3, u4);\n\t}\n\telse\n\t{\n\t\tgl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n\t}\n}", new qv.b[]{new qv.a("aPosition"), new qv.c("uMatrix"), new qv.c("uAlpha"), new qv.c(CameraFilterEngine.TEXTURE_MATRIX_UNIFORM), new qv.c("uTextureSampler0"), new qv.c("uTextureSampler1"), new qv.c("uTextureSampler2"), new qv.c("fWidth"), new qv.c("fHeight"), new qv.c("colorMat"), new qv.c("yuvFormat"), new qv.c("leavel")}, false);
    }
}
